@model ECommerce.Web.Services.ProductPagedResult

@{
    ViewData["Title"] = "Products - E-Commerce Store";
}

<div class="container-fluid px-4">
    <!-- Hero Section -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="hero-section rounded-4 text-white p-5 text-center position-relative animate__animated animate__fadeIn">
                <div class="position-relative" style="z-index: 2;">
                    <h1 class="display-3 fw-bold mb-3">
                        <i class="fas fa-gem me-3"></i>
                        Discover Premium Collection
                    </h1>
                    <p class="lead mb-4 fs-4">Explore our curated selection of exclusive products</p>
                    <div class="d-flex justify-content-center gap-3 flex-wrap">
                        <span class="badge bg-white bg-opacity-25 px-4 py-2 fs-6">
                            <i class="fas fa-shield-alt me-2"></i>Quality Assured
                        </span>
                        <span class="badge bg-white bg-opacity-25 px-4 py-2 fs-6">
                            <i class="fas fa-truck me-2"></i>Fast Delivery
                        </span>
                        <span class="badge bg-white bg-opacity-25 px-4 py-2 fs-6">
                            <i class="fas fa-star me-2"></i>Premium Service
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show animate__animated animate__fadeInDown shadow-sm" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            <strong>Success!</strong> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show animate__animated animate__fadeInDown shadow-sm" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            <strong>Error!</strong> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Action Bar -->
    <div class="row mb-4 align-items-center">
        <div class="col-lg-6 mb-3 mb-lg-0">
            <div class="d-flex align-items-center">
                <div class="me-3">
                    <div class="bg-gradient rounded-3 p-3 d-inline-block" style="background: var(--primary-gradient);">
                        <i class="fas fa-shopping-bag fa-2x text-white"></i>
                    </div>
                </div>
                <div>
                    <h2 class="mb-0 fw-bold">Product Catalog</h2>
                    <p class="text-muted mb-0">
                        <i class="fas fa-box me-1"></i>
                        @Model.TotalCount Product@(Model.TotalCount != 1 ? "s" : "") Available
                    </p>
                </div>
            </div>
        </div>
        <div class="col-lg-6 text-lg-end">
            @if (Context.Session.GetString("JWTToken") != null)
            {
                <a asp-action="Create" class="btn btn-success btn-lg px-4 shadow-sm">
                    <i class="fas fa-plus-circle me-2"></i>
                    Add New Product
                </a>
            }
            else
            {
                <a asp-controller="Account" asp-action="Login" class="btn btn-primary btn-lg px-4 shadow-sm">
                    <i class="fas fa-sign-in-alt me-2"></i>
                    Login to Manage Products
                </a>
            }
        </div>
    </div>

    <!-- Search & Filter Section -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body p-4">
            <form method="get" asp-action="Index" id="filterForm">
                <div class="row g-3">
                    <!-- Search -->
                    <div class="col-lg-4 col-md-6">
                        <label class="form-label fw-bold">
                            <i class="fas fa-search me-2"></i>Search Products
                        </label>
                        <input type="text" name="searchTerm" class="form-control" 
                               value="@ViewBag.SearchTerm" placeholder="Search by name or description...">
                    </div>

                    <!-- Min Price -->
                    <div class="col-lg-2 col-md-3 col-6">
                        <label class="form-label fw-bold">
                            <i class="fas fa-dollar-sign me-2"></i>Min Price
                        </label>
                        <input type="number" name="minPrice" class="form-control" 
                               value="@ViewBag.MinPrice" placeholder="0" step="0.01" min="0">
                    </div>

                    <!-- Max Price -->
                    <div class="col-lg-2 col-md-3 col-6">
                        <label class="form-label fw-bold">
                            <i class="fas fa-dollar-sign me-2"></i>Max Price
                        </label>
                        <input type="number" name="maxPrice" class="form-control" 
                               value="@ViewBag.MaxPrice" placeholder="âˆž" step="0.01" min="0">
                    </div>

                    <!-- Sort By -->
                    <div class="col-lg-2 col-md-6">
                        <label class="form-label fw-bold">
                            <i class="fas fa-sort me-2"></i>Sort By
                        </label>
                        <select name="sortBy" class="form-select">
                            <option value="date_desc" selected="@(ViewBag.SortBy == "date_desc" || string.IsNullOrEmpty(ViewBag.SortBy))">Newest First</option>
                            <option value="date_asc" selected="@(ViewBag.SortBy == "date_asc")">Oldest First</option>
                            <option value="price_asc" selected="@(ViewBag.SortBy == "price_asc")">Price: Low to High</option>
                            <option value="price_desc" selected="@(ViewBag.SortBy == "price_desc")">Price: High to Low</option>
                            <option value="name_asc" selected="@(ViewBag.SortBy == "name_asc")">Name: A-Z</option>
                            <option value="name_desc" selected="@(ViewBag.SortBy == "name_desc")">Name: Z-A</option>
                        </select>
                    </div>

                    <!-- Buttons -->
                    <div class="col-lg-2 col-md-6 d-flex align-items-end gap-2">
                        <button type="submit" class="btn btn-primary flex-fill">
                            <i class="fas fa-filter me-2"></i>Filter
                        </button>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                            <i class="fas fa-redo"></i>
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Results Summary -->
    @if (Model.TotalCount > 0)
    {
        <div class="mb-3 text-muted">
            <i class="fas fa-info-circle me-2"></i>
            Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount) of @Model.TotalCount products
        </div>
    }

    <!-- Products Grid -->
    @if (Model.Products.Any())
    {
        <div class="row g-4">
            @foreach (var product in Model.Products)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 animate__animated animate__fadeInUp">
                    <div class="card h-100 border-0 product-card shadow-sm">
                        <div class="position-relative overflow-hidden product-image-container">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" class="card-img-top product-image" alt="@product.Name" 
                                     style="height: 280px; object-fit: cover;">
                            }
                            else
                            {
                                <div class="card-img-top d-flex align-items-center justify-content-center product-image" 
                                     style="height: 280px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                                    <i class="fas fa-image fa-4x text-white opacity-50"></i>
                                </div>
                            }
                            <div class="position-absolute top-0 end-0 m-3">
                                <span class="badge bg-white text-dark px-3 py-2 shadow-sm">
                                    <i class="fas fa-tag me-1"></i>
                                    New
                                </span>
                            </div>
                        </div>
                        
                        <div class="card-body d-flex flex-column p-4">
                            <div class="mb-2">
                                <small class="text-muted text-uppercase" style="font-size: 0.75rem; letter-spacing: 1px;">
                                    <i class="fas fa-calendar me-1"></i>
                                    @product.CreatedAt.ToString("MMM dd, yyyy")
                                </small>
                            </div>
                            <h5 class="card-title fw-bold mb-2" style="color: var(--primary-color);">@product.Name</h5>
                            <p class="card-text text-muted flex-grow-1 mb-3" style="font-size: 0.9rem;">
                                @(product.Description.Length > 80 ? product.Description.Substring(0, 80) + "..." : product.Description)
                            </p>
                            <div class="mt-auto">
                                <div class="d-flex justify-content-between align-items-center mb-3 pb-3 border-bottom">
                                    <div>
                                        <small class="text-muted d-block" style="font-size: 0.75rem;">Price</small>
                                        <span class="h4 fw-bold mb-0 text-gradient">$@product.Price.ToString("F2")</span>
                                    </div>
                                    <div class="text-end">
                                        <small class="text-muted d-block" style="font-size: 0.75rem;">ID</small>
                                        <span class="fw-bold">#@product.Id</span>
                                    </div>
                                </div>
                                
                                <div class="d-grid gap-2">
                                    @if (Context.Session.GetString("JWTToken") != null)
                                    {
                                        <!-- Quick Add to Cart -->
                                        <form asp-controller="Cart" asp-action="Add" method="post" class="quick-add-form">
                                            <input type="hidden" name="productId" value="@product.Id" />
                                            <input type="hidden" name="quantity" value="1" />
                                            <button type="submit" class="btn btn-success btn-sm w-100">
                                                <i class="fas fa-cart-plus me-2"></i>Add to Cart
                                            </button>
                                        </form>
                                    }
                                    
                                    <a asp-action="Details" asp-route-id="@product.Id" 
                                       class="btn btn-primary btn-sm">
                                        <i class="fas fa-eye me-2"></i>View Details
                                    </a>
                                    
                                    @if (Context.Session.GetString("JWTToken") != null)
                                    {
                                        <div class="btn-group" role="group">
                                            <a asp-action="Edit" asp-route-id="@product.Id" 
                                               class="btn btn-outline-warning btn-sm">
                                                <i class="fas fa-edit me-1"></i>Edit
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@product.Id" 
                                               class="btn btn-outline-danger btn-sm">
                                                <i class="fas fa-trash me-1"></i>Delete
                                            </a>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="d-flex justify-content-center mt-5">
                <nav aria-label="Product pagination">
                    <ul class="pagination pagination-lg shadow-sm">
                        <!-- Previous Button -->
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" 
                               href="@Url.Action("Index", new { 
                                   searchTerm = ViewBag.SearchTerm, 
                                   minPrice = ViewBag.MinPrice, 
                                   maxPrice = ViewBag.MaxPrice, 
                                   sortBy = ViewBag.SortBy, 
                                   pageNumber = Model.PageNumber - 1 
                               })"
                               aria-label="Previous">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>

                        <!-- Page Numbers -->
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <!-- Show first 2, last 2, and pages around current -->
                            @if (i <= 2 || i > Model.TotalPages - 2 || Math.Abs(i - Model.PageNumber) <= 2)
                            {
                                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                    <a class="page-link" 
                                       href="@Url.Action("Index", new { 
                                           searchTerm = ViewBag.SearchTerm, 
                                           minPrice = ViewBag.MinPrice, 
                                           maxPrice = ViewBag.MaxPrice, 
                                           sortBy = ViewBag.SortBy, 
                                           pageNumber = i 
                                       })">
                                        @i
                                    </a>
                                </li>
                            }
                            else if (i == 3 && Model.PageNumber > 5)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            else if (i == Model.TotalPages - 2 && Model.PageNumber < Model.TotalPages - 4)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }

                        <!-- Next Button -->
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" 
                               href="@Url.Action("Index", new { 
                                   searchTerm = ViewBag.SearchTerm, 
                                   minPrice = ViewBag.MinPrice, 
                                   maxPrice = ViewBag.MaxPrice, 
                                   sortBy = ViewBag.SortBy, 
                                   pageNumber = Model.PageNumber + 1 
                               })"
                               aria-label="Next">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <div class="mb-4">
                            <i class="fas fa-box-open fa-5x text-muted opacity-50"></i>
                        </div>
                        <h3 class="fw-bold mb-3">No Products Found</h3>
                        <p class="text-muted mb-4">Try adjusting your search or filter criteria.</p>
                        <a href="@Url.Action("Index")" class="btn btn-primary btn-lg px-5">
                            <i class="fas fa-redo me-2"></i>
                            Clear Filters
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
    }
</div>

<style>
    .product-card {
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        border-radius: var(--radius-lg);
    }
    
    .product-card:hover {
        transform: translateY(-12px) scale(1.02);
        box-shadow: 0 20px 40px rgba(102, 126, 234, 0.2) !important;
    }
    
    .product-image-container {
        border-radius: var(--radius-lg) var(--radius-lg) 0 0;
        position: relative;
    }
    
    .product-image {
        transition: transform 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        border-radius: var(--radius-lg) var(--radius-lg) 0 0;
    }
    
    .product-card:hover .product-image {
        transform: scale(1.1) rotate(2deg);
    }
    
    .btn-group .btn {
        flex: 1;
    }
    
    .bg-gradient {
        background: var(--primary-gradient);
    }
    
    /* Staggered animation */
    .animate__fadeInUp {
        animation-delay: calc(var(--animation-order, 0) * 0.1s);
    }
</style>

@section Scripts {
<script>
    // Add staggered animation delay
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.animate__fadeInUp');
        cards.forEach((card, index) => {
            card.style.setProperty('--animation-order', index);
        });

        // Handle quick add to cart forms with AJAX
        $('.quick-add-form').on('submit', function(e) {
            e.preventDefault();
            
            const form = $(this);
            const button = form.find('button[type="submit"]');
            const originalHtml = button.html();
            
            // Disable button and show loading
            button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Adding...');
            
            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                success: function(response) {
                    // Show success feedback
                    button.html('<i class="fas fa-check me-2"></i>Added!').removeClass('btn-success').addClass('btn-success');
                    
                    // Update cart badge
                    if (typeof window.updateCartBadge === 'function') {
                        window.updateCartBadge();
                    }
                    
                    // Show toast notification
                    showToast('Success', 'Product added to cart!', 'success');
                    
                    // Reset button after 2 seconds
                    setTimeout(function() {
                        button.html(originalHtml).prop('disabled', false);
                    }, 2000);
                },
                error: function() {
                    // Show error feedback
                    button.html('<i class="fas fa-times me-2"></i>Failed').removeClass('btn-success').addClass('btn-danger');
                    showToast('Error', 'Failed to add product to cart', 'error');
                    
                    // Reset button after 2 seconds
                    setTimeout(function() {
                        button.html(originalHtml).removeClass('btn-danger').addClass('btn-success').prop('disabled', false);
                    }, 2000);
                }
            });
        });

        // Simple toast notification function
        function showToast(title, message, type) {
            const toast = $(`
                <div class="toast-notification ${type}" style="position: fixed; top: 100px; right: 20px; z-index: 9999; 
                     background: ${type === 'success' ? '#28a745' : '#dc3545'}; color: white; 
                     padding: 15px 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                     animation: slideInRight 0.3s ease-out;">
                    <strong>${title}:</strong> ${message}
                </div>
            `);
            
            $('body').append(toast);
            
            setTimeout(function() {
                toast.fadeOut(300, function() { $(this).remove(); });
            }, 3000);
        }
    });
</script>

<style>
    @@keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>
}